{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "_currency",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approvedBuyers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approvedSellers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currency",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderNumber",
          "type": "uint8"
        }
      ],
      "name": "depositCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_array",
          "type": "address[]"
        }
      ],
      "name": "isAddressInArray",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orderNumber",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "orders",
      "outputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderNumber",
          "type": "uint8"
        }
      ],
      "name": "receiveGoods",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        }
      ],
      "name": "removeApprovedBuyer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_seller",
          "type": "address"
        }
      ],
      "name": "removeApprovedSeller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        }
      ],
      "name": "setApprovedBuyer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_seller",
          "type": "address"
        }
      ],
      "name": "setApprovedSeller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_orderNumber",
          "type": "uint8"
        }
      ],
      "name": "setPriceAndGoods",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startExchange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0fd6a7927d6a0580588d86143738feef826e987954d4befc9a7414fceffed135",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1996333",
    "logsBloom": "0x
    "blockHash": "0x285c7a5cfccb02672c8d1dea058f4d3d5aa1ebb08ad28f68f43ef2efcfd3c40d",
    "transactionHash": "0x0fd6a7927d6a0580588d86143738feef826e987954d4befc9a7414fceffed135",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1996333",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5fbdb2315678afecb367f032d93f642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "58a5002df746b704d200a63678e907f8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_currency\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvedBuyers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvedSellers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderNumber\",\"type\":\"uint8\"}],\"name\":\"depositCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_array\",\"type\":\"address[]\"}],\"name\":\"isAddressInArray\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderNumber\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderNumber\",\"type\":\"uint8\"}],\"name\":\"receiveGoods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"removeApprovedBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"removeApprovedSeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"setApprovedBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"setApprovedSeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_orderNumber\",\"type\":\"uint8\"}],\"name\":\"setPriceAndGoods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startExchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Exchange.sol\":\"Exchange\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\n\\n// This is the main contract for the exchange of goods and currency\\n// between users. It is the main contract that will be deployed to the\\n// blockchain.\\n\\n// The whole scenario is that 2 traders, Alice and Bob, want to exchange.\\n// Alice wants to sell her goods for Bob's currency. So Bob deposits his\\n// currency into the exchange and when Bob receives Alice's goods, the\\n// exchange will transfer the currency to Alice.\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract Exchange {\\n    // The owner of the contract\\n    address public owner;\\n\\n    // The currency that is used in the exchange\\n    ERC20 public currency;\\n\\n    // The list of approved sellers\\n    address[] public approvedSellers;\\n\\n    // The list of approved buyers\\n    address[] public approvedBuyers;\\n\\n    // Order number\\n    uint8 public orderNumber = 0;\\n\\n    // The order of the exchange\\n    struct Order {\\n        address buyer;\\n        address seller;\\n        uint256 price;\\n        uint256 amount;\\n    }\\n    Order[] public orders;\\n\\n    constructor(ERC20 _currency) {\\n        owner = msg.sender;\\n        currency = _currency;\\n    }\\n\\n    // Start the exchange\\n    function startExchange() public returns (uint256) {\\n        require(\\n            isAddressInArray(msg.sender, approvedSellers) ||\\n                isAddressInArray(msg.sender, approvedBuyers),\\n            \\\"Only the Approved Seller or Buyer can start the exchange\\\"\\n        );\\n        orderNumber++;\\n        return orderNumber;\\n    }\\n\\n    // The seller set the price of the goods and the amount of goods\\n    function setPriceAndGoods(\\n        uint256 _price,\\n        uint256 _amount,\\n        uint8 _orderNumber\\n    ) public {\\n        require(\\n            isAddressInArray(msg.sender, approvedSellers),\\n            \\\"Only the Approved Seller can set the price\\\"\\n        );\\n        orders[_orderNumber].price = _price;\\n        orders[_orderNumber].amount = _amount;\\n        orders[_orderNumber].seller = msg.sender;\\n    }\\n\\n    // The buyer deposits the currency into the exchange\\n    // The buyer should be approved by the owner\\n    // The depositted currency should link to the order\\n    function depositCurrency(uint8 _orderNumber) public {\\n        require(orders[_orderNumber].price != 0, \\\"The price is not set yet\\\");\\n        require(\\n            isAddressInArray(msg.sender, approvedBuyers),\\n            \\\"Only the Approved Buyer can deposit the currency\\\"\\n        );\\n        require(\\n            currency.balanceOf(msg.sender) >= orders[_orderNumber].price,\\n            \\\"The buyer does not have enough currency\\\"\\n        );\\n        orders[_orderNumber].buyer = msg.sender;\\n        currency.transferFrom(\\n            msg.sender,\\n            address(this),\\n            orders[_orderNumber].price\\n        );\\n    }\\n\\n    // The buyer recieves the goods and releases the currency to the seller\\n    // need to check\\n    function receiveGoods(uint8 _orderNumber) public {\\n        require(\\n            currency.balanceOf(address(this)) >= orders[_orderNumber].price,\\n            \\\"The exchange does not have enough currency\\\"\\n        );\\n        require(\\n            orders[_orderNumber].buyer == msg.sender,\\n            \\\"Only the buyer can receive the goods\\\"\\n        );\\n        require(\\n            orders[_orderNumber].amount > 0,\\n            \\\"The amount of goods is not set yet\\\"\\n        );\\n        require(\\n            orders[_orderNumber].seller != address(0),\\n            \\\"The seller is not set yet\\\"\\n        );\\n        currency.transfer(\\n            orders[_orderNumber].seller,\\n            orders[_orderNumber].price\\n        );\\n    }\\n\\n    // The owner set the list the approved seller\\n    function setApprovedSeller(address _seller) public {\\n        require(\\n            msg.sender == owner,\\n            \\\"Only the owner can set the approved seller\\\"\\n        );\\n        approvedSellers.push(_seller);\\n    }\\n\\n    // The owner remove the approved seller\\n    function removeApprovedSeller(address _seller) public {\\n        require(\\n            msg.sender == owner,\\n            \\\"Only the owner can remove the approved seller\\\"\\n        );\\n        for (uint256 i = 0; i < approvedSellers.length; i++) {\\n            if (approvedSellers[i] == _seller) {\\n                delete approvedSellers[i];\\n            }\\n        }\\n    }\\n\\n    // The owner set the approved buyer\\n    function setApprovedBuyer(address _buyer) public {\\n        require(\\n            msg.sender == owner,\\n            \\\"Only the owner can set the approved buyer\\\"\\n        );\\n        approvedBuyers.push(_buyer);\\n    }\\n\\n    // The owner remove the approved buyer\\n    function removeApprovedBuyer(address _buyer) public {\\n        require(\\n            msg.sender == owner,\\n            \\\"Only the owner can remove the approved buyer\\\"\\n        );\\n        for (uint256 i = 0; i < approvedBuyers.length; i++) {\\n            if (approvedBuyers[i] == _buyer) {\\n                delete approvedBuyers[i];\\n            }\\n        }\\n    }\\n\\n    // Check the address is in the approved list\\n    function isAddressInArray(\\n        address _address,\\n        address[] memory _array\\n    ) public pure returns (bool) {\\n        for (uint256 i = 0; i < _array.length; i++) {\\n            if (_array[i] == _address) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xf169d533e52eeb7c1535a98df91f03b7dfce426d666b61cee5df1f7ec9f88ca4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806375e0178011610097578063999d25cc11610066578063999d25cc1461026e578063a85c38ef1461028a578063b04dd81b146102bd578063e5a6b10f146102db576100f5565b806375e01780146101e65780638da5cb5b146102045780638ebbea2914610222578063958c960a1461023e576100f5565b80632cca54d4116100d35780632cca54d414610162578063342a8f6c14610192578063562d703c146101ae57806371f55c19146101ca576100f5565b80630775b33d146100fa5780630b3a80ab146101165780630c76203514610132575b600080fd5b610114600480360381019061010f91906114b9565b6102f9565b005b610130600480360381019061012b91906114b9565b610461565b005b61014c6004803603810190610147919061151c565b6105c9565b6040516101599190611558565b60405180910390f35b61017c6004803603810190610177919061151c565b610608565b6040516101899190611558565b60405180910390f35b6101ac60048036038101906101a791906115ac565b610647565b005b6101c860048036038101906101c391906114b9565b6109bc565b005b6101e460048036038101906101df91906114b9565b610ab0565b005b6101ee610ba4565b6040516101fb91906115e8565b60405180910390f35b61020c610d5c565b6040516102199190611558565b60405180910390f35b61023c600480360381019061023791906115ac565b610d80565b005b6102586004803603810190610253919061175c565b611172565b60405161026591906117d3565b60405180910390f35b610288600480360381019061028391906117ee565b6111f9565b005b6102a4600480360381019061029f919061151c565b61138e565b6040516102b49493929190611841565b60405180910390f35b6102c561140e565b6040516102d29190611895565b60405180910390f35b6102e3611421565b6040516102f0919061190f565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610387576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037e906119ad565b60405180910390fd5b60005b60028054905081101561045d578173ffffffffffffffffffffffffffffffffffffffff16600282815481106103c2576103c16119cd565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361044a576002818154811061041c5761041b6119cd565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b808061045590611a2b565b91505061038a565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e690611ae5565b60405180910390fd5b60005b6003805490508110156105c5578173ffffffffffffffffffffffffffffffffffffffff166003828154811061052a576105296119cd565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036105b25760038181548110610584576105836119cd565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b80806105bd90611a2b565b9150506104f2565b5050565b600281815481106105d957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6003818154811061061857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060058260ff16815481106106605761065f6119cd565b5b906000526020600020906004020160020154036106b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a990611b51565b60405180910390fd5b61074233600380548060200260200160405190810160405280929190818152602001828054801561073857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106ee575b5050505050611172565b610781576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077890611be3565b60405180910390fd5b60058160ff1681548110610798576107976119cd565b5b906000526020600020906004020160020154600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016108059190611558565b602060405180830381865afa158015610822573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108469190611c18565b1015610887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087e90611cb7565b60405180910390fd5b3360058260ff168154811061089f5761089e6119cd565b5b906000526020600020906004020160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333060058560ff1681548110610945576109446119cd565b5b9060005260206000209060040201600201546040518463ffffffff1660e01b815260040161097593929190611cd7565b6020604051808303816000875af1158015610994573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b89190611d3a565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4190611dd9565b60405180910390fd5b6003819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3590611e6b565b60405180910390fd5b6002819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000610c36336002805480602002602001604051908101604052809291908181526020018280548015610c2c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610be2575b5050505050611172565b80610ccd5750610ccc336003805480602002602001604051908101604052809291908181526020018280548015610cc257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c78575b5050505050611172565b5b610d0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0390611efd565b60405180910390fd5b6004600081819054906101000a900460ff1680929190610d2b90611f1d565b91906101000a81548160ff021916908360ff16021790555050600460009054906101000a900460ff1660ff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60058160ff1681548110610d9757610d966119cd565b5b906000526020600020906004020160020154600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e049190611558565b602060405180830381865afa158015610e21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e459190611c18565b1015610e86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7d90611fb8565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1660058260ff1681548110610eb457610eb36119cd565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f339061204a565b60405180910390fd5b600060058260ff1681548110610f5557610f546119cd565b5b90600052602060002090600402016003015411610fa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9e906120dc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660058260ff1681548110610fd657610fd56119cd565b5b906000526020600020906004020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361105e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105590612148565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60058360ff16815481106110b3576110b26119cd565b5b906000526020600020906004020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660058460ff16815481106110fc576110fb6119cd565b5b9060005260206000209060040201600201546040518363ffffffff1660e01b815260040161112b929190612168565b6020604051808303816000875af115801561114a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116e9190611d3a565b5050565b600080600090505b82518110156111ed578373ffffffffffffffffffffffffffffffffffffffff168382815181106111ad576111ac6119cd565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16036111da5760019150506111f3565b80806111e590611a2b565b91505061117a565b50600090505b92915050565b61128933600280548060200260200160405190810160405280929190818152602001828054801561127f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611235575b5050505050611172565b6112c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112bf90612203565b60405180910390fd5b8260058260ff16815481106112e0576112df6119cd565b5b9060005260206000209060040201600201819055508160058260ff168154811061130d5761130c6119cd565b5b9060005260206000209060040201600301819055503360058260ff168154811061133a576113396119cd565b5b906000526020600020906004020160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6005818154811061139e57600080fd5b90600052602060002090600402016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154905084565b600460009054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114868261145b565b9050919050565b6114968161147b565b81146114a157600080fd5b50565b6000813590506114b38161148d565b92915050565b6000602082840312156114cf576114ce611451565b5b60006114dd848285016114a4565b91505092915050565b6000819050919050565b6114f9816114e6565b811461150457600080fd5b50565b600081359050611516816114f0565b92915050565b60006020828403121561153257611531611451565b5b600061154084828501611507565b91505092915050565b6115528161147b565b82525050565b600060208201905061156d6000830184611549565b92915050565b600060ff82169050919050565b61158981611573565b811461159457600080fd5b50565b6000813590506115a681611580565b92915050565b6000602082840312156115c2576115c1611451565b5b60006115d084828501611597565b91505092915050565b6115e2816114e6565b82525050565b60006020820190506115fd60008301846115d9565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61165182611608565b810181811067ffffffffffffffff821117156116705761166f611619565b5b80604052505050565b6000611683611447565b905061168f8282611648565b919050565b600067ffffffffffffffff8211156116af576116ae611619565b5b602082029050602081019050919050565b600080fd5b60006116d86116d384611694565b611679565b905080838252602082019050602084028301858111156116fb576116fa6116c0565b5b835b81811015611724578061171088826114a4565b8452602084019350506020810190506116fd565b5050509392505050565b600082601f83011261174357611742611603565b5b81356117538482602086016116c5565b91505092915050565b6000806040838503121561177357611772611451565b5b6000611781858286016114a4565b925050602083013567ffffffffffffffff8111156117a2576117a1611456565b5b6117ae8582860161172e565b9150509250929050565b60008115159050919050565b6117cd816117b8565b82525050565b60006020820190506117e860008301846117c4565b92915050565b60008060006060848603121561180757611806611451565b5b600061181586828701611507565b935050602061182686828701611507565b925050604061183786828701611597565b9150509250925092565b60006080820190506118566000830187611549565b6118636020830186611549565b61187060408301856115d9565b61187d60608301846115d9565b95945050505050565b61188f81611573565b82525050565b60006020820190506118aa6000830184611886565b92915050565b6000819050919050565b60006118d56118d06118cb8461145b565b6118b0565b61145b565b9050919050565b60006118e7826118ba565b9050919050565b60006118f9826118dc565b9050919050565b611909816118ee565b82525050565b60006020820190506119246000830184611900565b92915050565b600082825260208201905092915050565b7f4f6e6c7920746865206f776e65722063616e2072656d6f76652074686520617060008201527f70726f7665642073656c6c657200000000000000000000000000000000000000602082015250565b6000611997602d8361192a565b91506119a28261193b565b604082019050919050565b600060208201905081810360008301526119c68161198a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a36826114e6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611a6857611a676119fc565b5b600182019050919050565b7f4f6e6c7920746865206f776e65722063616e2072656d6f76652074686520617060008201527f70726f7665642062757965720000000000000000000000000000000000000000602082015250565b6000611acf602c8361192a565b9150611ada82611a73565b604082019050919050565b60006020820190508181036000830152611afe81611ac2565b9050919050565b7f546865207072696365206973206e6f7420736574207965740000000000000000600082015250565b6000611b3b60188361192a565b9150611b4682611b05565b602082019050919050565b60006020820190508181036000830152611b6a81611b2e565b9050919050565b7f4f6e6c792074686520417070726f7665642042757965722063616e206465706f60008201527f736974207468652063757272656e637900000000000000000000000000000000602082015250565b6000611bcd60308361192a565b9150611bd882611b71565b604082019050919050565b60006020820190508181036000830152611bfc81611bc0565b9050919050565b600081519050611c12816114f0565b92915050565b600060208284031215611c2e57611c2d611451565b5b6000611c3c84828501611c03565b91505092915050565b7f54686520627579657220646f6573206e6f74206861766520656e6f756768206360008201527f757272656e637900000000000000000000000000000000000000000000000000602082015250565b6000611ca160278361192a565b9150611cac82611c45565b604082019050919050565b60006020820190508181036000830152611cd081611c94565b9050919050565b6000606082019050611cec6000830186611549565b611cf96020830185611549565b611d0660408301846115d9565b949350505050565b611d17816117b8565b8114611d2257600080fd5b50565b600081519050611d3481611d0e565b92915050565b600060208284031215611d5057611d4f611451565b5b6000611d5e84828501611d25565b91505092915050565b7f4f6e6c7920746865206f776e65722063616e207365742074686520617070726f60008201527f7665642062757965720000000000000000000000000000000000000000000000602082015250565b6000611dc360298361192a565b9150611dce82611d67565b604082019050919050565b60006020820190508181036000830152611df281611db6565b9050919050565b7f4f6e6c7920746865206f776e65722063616e207365742074686520617070726f60008201527f7665642073656c6c657200000000000000000000000000000000000000000000602082015250565b6000611e55602a8361192a565b9150611e6082611df9565b604082019050919050565b60006020820190508181036000830152611e8481611e48565b9050919050565b7f4f6e6c792074686520417070726f7665642053656c6c6572206f72204275796560008201527f722063616e207374617274207468652065786368616e67650000000000000000602082015250565b6000611ee760388361192a565b9150611ef282611e8b565b604082019050919050565b60006020820190508181036000830152611f1681611eda565b9050919050565b6000611f2882611573565b915060ff8203611f3b57611f3a6119fc565b5b600182019050919050565b7f5468652065786368616e676520646f6573206e6f74206861766520656e6f756760008201527f682063757272656e637900000000000000000000000000000000000000000000602082015250565b6000611fa2602a8361192a565b9150611fad82611f46565b604082019050919050565b60006020820190508181036000830152611fd181611f95565b9050919050565b7f4f6e6c79207468652062757965722063616e207265636569766520746865206760008201527f6f6f647300000000000000000000000000000000000000000000000000000000602082015250565b600061203460248361192a565b915061203f82611fd8565b604082019050919050565b6000602082019050818103600083015261206381612027565b9050919050565b7f54686520616d6f756e74206f6620676f6f6473206973206e6f7420736574207960008201527f6574000000000000000000000000000000000000000000000000000000000000602082015250565b60006120c660228361192a565b91506120d18261206a565b604082019050919050565b600060208201905081810360008301526120f5816120b9565b9050919050565b7f5468652073656c6c6572206973206e6f74207365742079657400000000000000600082015250565b600061213260198361192a565b915061213d826120fc565b602082019050919050565b6000602082019050818103600083015261216181612125565b9050919050565b600060408201905061217d6000830185611549565b61218a60208301846115d9565b9392505050565b7f4f6e6c792074686520417070726f7665642053656c6c65722063616e2073657460008201527f2074686520707269636500000000000000000000000000000000000000000000602082015250565b60006121ed602a8361192a565b91506121f882612191565b604082019050919050565b6000602082019050818103600083015261221c816121e0565b905091905056fea26469706673582212207093032a4adc27b8a4e374a6ad0cf980ab42e683c609053997bce1777f1b4e0464736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 824,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 827,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "currency",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ERC20)651"
      },
      {
        "astId": 830,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "approvedSellers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 833,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "approvedBuyers",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 836,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "orderNumber",
        "offset": 0,
        "slot": "4",
        "type": "t_uint8"
      },
      {
        "astId": 849,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "orders",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(Order)845_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Order)845_storage)dyn_storage": {
        "base": "t_struct(Order)845_storage",
        "encoding": "dynamic_array",
        "label": "struct Exchange.Order[]",
        "numberOfBytes": "32"
      },
      "t_contract(ERC20)651": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_struct(Order)845_storage": {
        "encoding": "inplace",
        "label": "struct Exchange.Order",
        "members": [
          {
            "astId": 838,
            "contract": "contracts/Exchange.sol:Exchange",
            "label": "buyer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 840,
            "contract": "contracts/Exchange.sol:Exchange",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 842,
            "contract": "contracts/Exchange.sol:Exchange",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 844,
            "contract": "contracts/Exchange.sol:Exchange",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}